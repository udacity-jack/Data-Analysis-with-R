b.eigen = eigen(b.cov)
b.eigen
show(my.classes)
# Author: Steve Pittard - wsp@emory.edu, ticopittard@gmail.com
# This video is in support of the following YouTube video:
# Using prcomp and varimax for PCA in R www.youtube.com/watch?v=PSuvMBtvJcA
# shows how to use the prcomp and varimax functions in R to accomplish a
# Principal Components Analysis. We cover the following steps:
# 1) Read in the Data,
# 2) Plot a Correlation Matrix,
# 3) Call prcomp,
# 4) DotPlot the PCA loadings,
# 5) Apply the Kaiser Criterion,
# 6) Make a screeplot,
# 7) Plot the Biplot, and
# 8) Apply the varimax rotation.
# The example data comes from: Abdi, H., & Williams, L.J. (2010).
# Principal Component Analysis, Wiley Interdisciplinary Reviews: Computational Statistics, 2, 433-459
library(lattice)
my.wines <- read.csv("http://steviep42.bitbucket.org/YOUTUBE.DIR/wines.csv", header=TRUE)
my.wines
# Look at the correlations
library(gclus)
my.abs     <- abs(cor(my.wines[,-1]))
my.abs
my.colors  <- dmat.color(my.abs)
my.colors
my.ordered <- order.single(cor(my.wines[,-1]))
cpairs(my.wines, my.ordered, panel.colors=my.colors, gap=0.5)
# Do the PCA
my.prc <- prcomp(my.wines[,-1], center=TRUE, scale=TRUE)
screeplot(my.prc, main="Scree Plot", xlab="Components")
screeplot(my.prc, main="Scree Plot", type="line" )
# class(my.prc)
# ls(my.prc)  x is the score
# summary(my.prc)
# we get five components and which ones do we wanna keep? We can apply Kaiser Criterion that means keep the compeonets which have
# eigvalues that is greater than 1, how to get the compoments eigenvalue "my.prc$sdev ^2"
# or anther way is using "scree plot", see line 34, 35
# load
# variables         PC1     PC2      PC3     PC4       PC5
# Hedonic -0.3965 -0.1149  0.80247  0.0519  1.63e-01
# Meat    -0.4454  0.1090 -0.28106 -0.2745  6.78e-01
# Dessert -0.2646  0.5854 -0.09607  0.7603 -1.36e-15
# Price    0.4160  0.3111  0.00734 -0.0939  5.68e-01
# Sugar   -0.0485  0.7245  0.21611 -0.5474 -3.39e-01
# Alcohol -0.4385 -0.0555 -0.46576 -0.1687 -2.75e-01
# Acidity -0.4547 -0.0865  0.06430 -0.0835  1.44e-02
# PC1-5 are principle components. each component is a linear combination of each variables(meat, price....).
# each column/coeffiecencs of above matrix is called loadings or rotations and to indicate to what extent each variable is
# correlated with that specific component.
# use DotPLot to check correlation between each variable and principle component
# DotPlot PC1, look component itself
load    <- my.prc$rotation
sorted.loadings <- load[order(load[, 1]), 1]
# my.prc
myTitle <- "Loadings Plot for PC1"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# DotPlot PC2
sorted.loadings <- load[order(load[, 2]), 2]
myTitle <- "Loadings Plot for PC2"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# DotPlot PC3
sorted.loadings <- load[order(load[, 3]), 3]
myTitle <- "Loadings Plot for PC3"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# Now draw the BiPlot
biplot(my.prc, cex=c(1, 0.5))
# Apply the Varimax Rotation
my.var <- varimax(my.prc$rotation)
my.var
load    <- my.prc$rotation
load
summary(loading)
summary(load)
my.prc <- prcomp(my.wines[,-1], center=TRUE, scale=TRUE)
summary(my.prcc)
summary(my.prc)
load
my.var <- varimax(my.prc$rotation)
my.var
# Author: Steve Pittard - wsp@emory.edu, ticopittard@gmail.com
# This video is in support of the following YouTube video:
# Using prcomp and varimax for PCA in R www.youtube.com/watch?v=PSuvMBtvJcA
# shows how to use the prcomp and varimax functions in R to accomplish a
# Principal Components Analysis. We cover the following steps:
# 1) Read in the Data,
# 2) Plot a Correlation Matrix,
# 3) Call prcomp,
# 4) DotPlot the PCA loadings,
# 5) Apply the Kaiser Criterion,
# 6) Make a screeplot,
# 7) Plot the Biplot, and
# 8) Apply the varimax rotation.
# The example data comes from: Abdi, H., & Williams, L.J. (2010).
# Principal Component Analysis, Wiley Interdisciplinary Reviews: Computational Statistics, 2, 433-459
library(lattice)
my.wines <- read.csv("http://steviep42.bitbucket.org/YOUTUBE.DIR/wines.csv", header=TRUE)
my.wines
# Look at the correlations
library(gclus)
my.abs     <- abs(cor(my.wines[,-1]))
my.abs
my.colors  <- dmat.color(my.abs)
my.colors
my.ordered <- order.single(cor(my.wines[,-1]))
cpairs(my.wines, my.ordered, panel.colors=my.colors, gap=0.5)
# Do the PCA
my.prc <- prcomp(my.wines[,-1], center=TRUE, scale=TRUE)
screeplot(my.prc, main="Scree Plot", xlab="Components")
screeplot(my.prc, main="Scree Plot", type="line" )
# class(my.prc)
# ls(my.prc)  x is the score
# summary(my.prc)
# we get five components and which ones do we wanna keep? We can apply Kaiser Criterion that means keep the compeonets which have
# eigvalues that is greater than 1, how to get the compoments eigenvalue "my.prc$sdev ^2"
# or anther way is using "scree plot", see line 34, 35
# load
# variables         PC1     PC2      PC3     PC4       PC5
# Hedonic -0.3965 -0.1149  0.80247  0.0519  1.63e-01
# Meat    -0.4454  0.1090 -0.28106 -0.2745  6.78e-01
# Dessert -0.2646  0.5854 -0.09607  0.7603 -1.36e-15
# Price    0.4160  0.3111  0.00734 -0.0939  5.68e-01
# Sugar   -0.0485  0.7245  0.21611 -0.5474 -3.39e-01
# Alcohol -0.4385 -0.0555 -0.46576 -0.1687 -2.75e-01
# Acidity -0.4547 -0.0865  0.06430 -0.0835  1.44e-02
# PC1-5 are principle components. each component is a linear combination of each variables(meat, price....).
# each column/coeffiecencs of above matrix is called loadings or rotations and to indicate to what extent each variable is
# correlated with that specific component.
# use DotPLot to check correlation between each variable and principle component
# DotPlot PC1, look component itself
load    <- my.prc$rotation
sorted.loadings <- load[order(load[, 1]), 1]
# my.prc
myTitle <- "Loadings Plot for PC1"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# DotPlot PC2
sorted.loadings <- load[order(load[, 2]), 2]
myTitle <- "Loadings Plot for PC2"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# DotPlot PC3
sorted.loadings <- load[order(load[, 3]), 3]
myTitle <- "Loadings Plot for PC3"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# Now draw the BiPlot
biplot(my.prc, cex=c(1, 0.5))
# Apply the Varimax Rotation
my.var <- varimax(my.prc$rotation)
my.var
library(ggplot2)
install.packages('RColorBrewer')
library(ggplot2)
install.packages('RColorBrewer')
data(diamonds)
diamonds
head(diamonds)
qplot(data=diamonds, x=carat, y=price, color=cut) scale_color_brewer(palette='Accent')
scale_color_brewer(palette='Accent')
qplot(data=diamonds, x=carat, y=price, color=cut)
scale_color_brewer(palette='Accent')
qplot(data=diamonds, x=carat, y=price, color=cut)
scale_color_brewer(palette='Accent')
library(ggplot2)
install.packages('RColorBrewer')
library('RColorBrewer')
head(diamonds)
qplot(data=diamonds, x=carat, y=price, color=cut)
scale_color_brewer(palette='Accent')
install.packages("swirl")
library(swirl)
swirl()
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
0
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawl
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
exit
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
info()
bye()
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Jack")
udacious
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
data(mtcars)
show(mtcars)
head(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
test-vector <- c(1:30)
test_vector <- c(1:30)
# All of these commands took some inputs or arguments.
test_vector
mtcars$mpg
mean(mtcars$mpg)
?mean
getpwd()
getwd()
setwd('~/Dropbox/R/udacity-github/EDA_Course_Materials/lesson2/')
getwd()
statesInfo <-read.csv('stateData.csv')
View(statesInfo)
View(statesInfo)
subset(statesInfo, state.region == 1)
subset(statesInfo, state.region == 1)
subset(statesInfo, state.region == 1)
View(statesInfo)
View(statesInfo)
statesInfo[statesInfo$state.region == 1, ]
stateSubset <- subset(statesInfo, state.region ==1 )
head(stateSubset, 2)
dim(stateSubset)
stateSubsetBracketFormat <- statesInfo[statesInfo$state.region ==1, ]
head(stateSubsetBracketFormat)
dim(stateSubsetBracketFormat)
View(stateSubsetBracketFormat)
View(stateSubsetBracketFormat)
View(stateSubsetBracketFormat)
View(stateSubset)
Title
========================================================
This is an R Markdown document or RMD. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document.
Title
========================================================
This is an R Markdown document or RMD. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document.
========================================================
This is an R Markdown document or RMD. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document.
source('~/.active-rstudio-document', echo=TRUE)
?cars
str(cars)
plot(cars)
```{r fig.width=7, fig.height=6}
plot(cars)
```{r}
summary(mtcars)
```
str(mtcars)
efficent = mtcars(mtcars$mpg >=23,)
efficent = mtcars[mtcars$mpg >=23,]
efficent
summary(efficent)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
subset(mtcars, qsec <=16.90)
?mtcars
mtcars
dim(mtcars)
subset(mtcars, qsec <=16.90)
lightCars = mtcars[mtcars$wt <2.0,]
dim(lightCars)
lightCars
mtcars$year <- 1974
mtcars
View(mtcars)
mtcars <- subset(mtcars, select = -year)
View(mtcars)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
View(mtcars)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
subset(mtcars, mpg >=30 | hp < 60)
source('~/.active-rstudio-document', echo=TRUE)
reddit <- read.csv('reddit.csv')
reddit <- read.csv('reddit.csv')
View(reddit)
getwd()
reddit
View(reddit)
View(reddit)
str(reddit)
table(reddit$employment.status)
View(reddit)
levels(reddit$age.range)
library(ggpplot)
library(ggplot)
library(ggplot2)
qplot(data=reddit, x=age.range)
View(reddit)
qplot(date=reddit, x=income.range)
qplot(date=reddit, x=income.range)
View(reddit)
View(reddit)
View(reddit)
qplot(date=reddit, x=income.range)
reddit <- read.csv('reddit.csv')
qplot(date=reddit, x=income.range)
str(reddit)
levels(reddit$age.range)
levels(reddit$income.range)
qplot(data=reddit, x=age.range)
qplot(date=reddit, x=income.range)
qplot(data=reddit, x=income.range)
levels(reddit$age.range)
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"))
reddit$age.range <- ordered(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"))
qplot(data=reddit, x=age.range)
reddit$age.range <-factor(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"),
ordered =R)
qplot(data=reddit, x=age.range)
reddit$age.range <-factor(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"),
ordered =R)
qplot(data=reddit, x=age.range)
reddit$age.range <- ordered(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"))
qplot(data=reddit, x=age.range)
reddit$age.range <-factor(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"),
ordered =R)
qplot(data=reddit, x=age.range)
reddit$age.range <-factor(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"),
ordered =T)
qplot(data=reddit, x=age.range)
reddit$age.range <-factor(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"),
ordered =T)
qplot(data=reddit, x=age.range)
setwd('~/Dropbox/R/udacity-github/EDA_Course_Materials/lesson2/')
getwd()
statesInfo <-read.csv('stateData.csv')
View(statesInfo)
statesInfo[statesInfo$state.region == 1, ]
dim(stateSubset)
stateSubset <- subset(statesInfo, state.region ==1 )
head(stateSubset, 2)
dim(stateSubset)
reddit <- read.csv('reddit.csv')
str(reddit)
table(reddit$employment.status)
levels(reddit$age.range)
levels(reddit$income.range)
library(ggplot2)
qplot(data=reddit, x=age.range)
qplot(data=reddit, x=income.range)
reddit$age.range <- ordered(reddit$age.range,
levels = c("Under 18","18-24","25-34","35-44", "45-54","55-64","65 or Above"))
qplot(data=reddit, x=age.range)
getwd()
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
help(c)
c(1,7:9)
c(1:5, 10.5, "next")
x <- 1:4
names(x) <- letters[1:4]
x
names(x)
letters
x
c(x)          # has names
as.vector(x)  # no names
dim(x) <- c(2,2)
x
c(x)
as.vector(x)
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
head(mtcars)
View(mtcars)
str(mtcars)
source('~/Dropbox/R/udacity-github/EDA_Course_Materials/lesson2/demystifying.R', echo=TRUE)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
getwd()
setwd('/Users/Jack/Dropbox/R/udacity-github/EDA_Course_Materials/lesson3')
getwd()
list.files()
pf <-read.csv('pseudo_facebook.tsv', sep='\t')
pf <-read.csv('pseudo_facebook.tsv', sep='\t')
View(pf)
name(pf)
names(pf)
qplot(data=pf, x=dob_day)
scale_x_discrete(break=1:31)
qplot(data=pf, x=dob_day) +
scale_x_discrete(break=1:31)
```{r Histogram of Users\' Birthdays}
#install.packages('ggplot2')
library(ggplot2)
#names(pf)
qplot(data=pf, x=dob_day) +
scale_x_discrete(break=1:31)
```
qplot(data=pf, x=dob_day) +
scale_x_discrete(breaks=1:31)
facet_wrap(~dob_month, ncol=3)
qplot(data=pf, x=dob_day) +
scale_x_discrete(breaks=1:31) +
facet_wrap(~dob_month, ncol=3)
qplot(data=pf, x=friend_count)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram()
qplot(dat=pf, x=friend_count)
qplot(data=pf, x=friend_count)
qplot(x=friend_count, data=pf, xlim=c(0,1000))
qplot(data=pf, x=friend_count)
qplot(x=friend_count, data=pf, xlim=c(0,1000))
qplot(x=friend_count, data=pf) +
scale_x_continuous(limits=c(0,1000))
qplot(x=friend_count, data=pf) +
scale_x_continuous(limits=c(0,1000)) +
scale_y_continuous(limits=c(0,100))
qplot(x=friend_count, data=pf) +
scale_x_continuous(limits=c(0,1000)) +
scale_y_continuous(limits=c(0,1000))
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) # +
facet_wrap(~gender, ncol=3)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol=3)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol=2)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_grid(gender~.)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender)
qplot(x=friend_count, data=pf, binwidth=25) +
scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,50)) +
facet_grid(gender~.)
qplot(x=friend_count, data=subset(pf, !is.na(gender)), binwidth=10) +
scale_x_continuous(lim=c(0,1000), breaks =seq(0,1000,50)) +
facet_wrap(~gender)
table(pf$gender)
table(pf$gender)
table(pf$gender)
by(pf$friend_count,pf$gender, summary)
qplot(x=tenure, data=pf,
color =I('black'), fill = I('#099DD9'))
